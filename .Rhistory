cat("the effect for the labour:",labour_ests)
cat("the difference of the effect:", tory_ests-labour_ests)
## estimates four regression models:
##tory_loser <- lm(y ~ )
library(blockTools)
data("x100")
## Set seed:
set.seed(123)
## Choose IDs of treatment grouo randomly:
id_tr <- sample(x100$id,nrow(x100)/2,replace=FALSE)
## Add "Treatment"/"Control" to x100:
x100$simple_tr <- 0
x100$simple_tr[x100$id %in% id_tr] <- 1
## Calculate the mean of "b1" for the treatment and control
b1_si_t <- mean(x100$b1[x100$simple_tr == 1])
b1_si_c <- mean(x100$b1[x100$simple_tr == 0])
b1_si_t
b1_si_c
## Compare the treatment and control
b1_si_t - b1_si_c
## Block on "b1"
blocked <- block(x100, id.vars = "id",
block.vars = "b1")
# Assign treatment:
assigned <- assignment(blocked, seed = 1)
assg <- assigned$assg$`1`
# Rename columns of blocked units:
names(assg)[1] <- "Treatment"
names(assg)[2] <- "Control"
# Add "Treatment"/"Control" to x100:
x100$block_tr <- NA
x100$block_tr[x100$id %in% assg$Treatment] <- 1
x100$block_tr[x100$id %in% assg$Control] <- 0
b1_br_t <- mean(x100$b1[x100$block_tr == 1])
b1_br_c <- mean(x100$b1[x100$block_tr == 0])
b1_br_t
b1_br_c
b1_br_t - b1_br_t
## Compare to part c)
### The difference of the means of 'b1' between T/C
cat("part c) :", b1_si_t - b1_si_c)
cat("brocked :", b1_br_t - b1_br_c)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
ate_ests
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
mps <- read_csv("http://j.mp/32PHfFd")
head(mps)
mps <- mps %>% mutate(winner=if_else(margin > 0,1,0))
head(mps)
ate_ests
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
mps <- read_csv("http://j.mp/32PHfFd")
head(mps)
mps <- mps %>% mutate(winner=if_else(margin > 0,1,0))
head(mps)
ate_ests <- mean(mps$ln.net[mps$winner==1]) - mean(mps$ln.net[mps$winner==0])
ate_ests
## Estimate ATE by difference-in-means
ate_ests <- mean(mps$ln.net[mps$winner==1]) - mean(mps$ln.net[mps$winner==0])
ate_ests
# Problem 1
# a) Read the data into R and name it `mps`
mps <- read_csv("http://j.mp/32PHfFd")
# b) Create a new variable called `winner`.  Set it equal to `1` if `margin` is greater than 0; set it to `0` if `margin` is less than zero.
mps <- mps %>% mutate(winner=if_else(margin > 0,1,0))
# c) Consider `winner` to be a randomly assigned treatment.  Estimate the causal effect of `winner` on `ln.net`, net worth at death of these candidates.
## Estimate ATE by difference-in-means
ate_ests <- mean(mps$ln.net[mps$winner==1]) - mean(mps$ln.net[mps$winner==0])
ate_ests
### 0.5208094
## d) Investigate whether the effect of `winner` varies by `party`.
## Check the name of all parties:
unique(mps$party)
## the effect for candidates of the "tory":
tory_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "tory")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "tory")])
cat("the effect for the tory:",tory_ests)
cat("the effect for the labour:",labour_ests)
cat("the difference of the effect:", tory_ests-labour_ests)
## the effect for candidates of the "labour":
labour_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "labour")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "labour")])
cat("the effect for the tory:",tory_ests)
cat("the effect for the labour:",labour_ests)
cat("the difference of the effect:", tory_ests-labour_ests)
mps[(mps$winner == 0) & (mps$party == "tory")]
mps[(mps$winner == 0) & (mps$party == "tory")]
[(mps$winner == 0) & (mps$party == "tory")]
(mps$winner == 0) & (mps$party == "tory")
mps[(mps$winner == 0) & (mps$party == "tory"),]
## estimate four regression models:
tory_loser <- lm(ln.net ~ margin, data = mps[(mps$winner == 0) & (mps$party == "tory"),])
predict(tony_loser, data.frame(margin = 0))
predict(tory_loser, data.frame(margin = 0))
summary(tory_loser)
tory_loser$coefficients
tory_loser$coefficients[0]
tory_loser$coefficients$(Intercept)
tory_loser$coefficients$Intercept
type(tory_loser$coefficients)
cofs <- tory_loser$coefficients
diff_tory <- t_w_0 - t_l_0
diff_labour <- l_w_0 - l_l_0
t_l_0 <- predict(tory_loser, data.frame(margin = 0))
t_w_0 <- predict(tory_winner, data.frame(margin = 0))
l_l_0 <- predict(labour_loser, data.frame(margin = 0))
l_w_0 <- predict(labour_winner, data.frame(margin = 0))
tory_loser <- lm(ln.net ~ margin, data = mps[(mps$winner == 0) & (mps$party == "tory"),])
tory_winner <- lm(ln.net ~ margin, data = mps[(mps$winner == 1) & (mps$party == "tory"),])
labour_loser <- lm(ln.net ~ margin, data = mps[(mps$winner == 0) & (mps$party == "labour"),])
labour_winner <- lm(ln.net ~ margin, data = mps[(mps$winner == 1) & (mps$party == "labour"),])
t_l_0 <- predict(tory_loser, data.frame(margin = 0))
t_w_0 <- predict(tory_winner, data.frame(margin = 0))
l_l_0 <- predict(labour_loser, data.frame(margin = 0))
l_w_0 <- predict(labour_winner, data.frame(margin = 0))
diff_tory <- t_w_0 - t_l_0
diff_labour <- l_w_0 - l_l_0
diff_tory
diff_labour
diff_diff <- diff_tory - diff_labour
diff_diff
library(blockTools)
data("x100")
# b) Create a new variable `ra_tr` in the `x100` data, and randomly allocate half the units to treatment (1), half to control (0).
# (Set the random seed to make your allocation replicable.)
## Set seed:
set.seed(123)
## Choose IDs of treatment group randomly:
id_tr <- sample(x100$id,nrow(x100)/2,replace=FALSE)
## Add "Treatment"/"Control" to x100:
x100$simple_tr <- 0
x100$simple_tr[x100$id %in% id_tr] <- 1
b1_si_t <- mean(x100$b1[x100$simple_tr == 1])
b1_si_c <- mean(x100$b1[x100$simple_tr == 0])
b1_si_t
b1_si_c
## Compare the treatment and control groups:
b1_si_t - b1_si_c
blocked <- block(x100, id.vars = "id",block.vars = "b1")
# Assign treatment:
assigned <- assignment(blocked, seed = 1)
assg <- assigned$assg$`1`
# Rename columns of blocked units:
names(assg)[1] <- "Treatment"
names(assg)[2] <- "Control"
# Add "Treatment"/"Control" to x100:
x100$block_tr <- NA
x100$block_tr[x100$id %in% assg$Treatment] <- 1
x100$block_tr[x100$id %in% assg$Control] <- 0
## Calculate the mean of "b1" for the treatment and control
b1_br_t <- mean(x100$b1[x100$block_tr == 1])
b1_br_c <- mean(x100$b1[x100$block_tr == 0])
b1_br_t
b1_br_c
b1_br_t - b1_br_t
b1_br_t - b1_br_c
cat("part c) :", b1_si_t - b1_si_c)
cat("brocked :", b1_br_t - b1_br_c)
# Problem 1
# a) Read the data into R and name it `mps`
mps <- read_csv("http://j.mp/32PHfFd")
# b) Create a new variable called `winner`.  Set it equal to `1` if `margin` is greater than 0; set it to `0` if `margin` is less than zero.
mps <- mps %>% mutate(winner=if_else(margin > 0,1,0))
# c) Consider `winner` to be a randomly assigned treatment.  Estimate the causal effect of `winner` on `ln.net`, net worth at death of these candidates.
## Estimate ATE by difference-in-means
ate_ests <- mean(mps$ln.net[mps$winner==1]) - mean(mps$ln.net[mps$winner==0])
ate_ests
### 0.5208094
# d) Investigate whether the effect of `winner` varies by `party`.
## Check the name of all parties:
unique(mps$party)
### [1] "tory"   "labour"
## the effect for candidates of the "tory":
tory_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "tory")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "tory")])
## the effect for candidates of the "labour":
labour_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "labour")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "labour")])
cat("the effect for the tory:",tory_ests)
### the effect for the tory: 0.7932196
cat("the effect for the labour:",labour_ests)
### the effect for the labour: -0.08265672
cat("the difference of the effect:", tory_ests-labour_ests)
### the difference of the effect: 0.8758763
# e) (Optional bonus question:) Replicate the "regression discontinuity design" of egghai09. That is, estimate four regression models of
# `ln.net` on `margin` (one for each combination of `party` and `winner`); predict the value of `ln.net` at `margin`$=0$ from each model;
# calculate the difference in these predictions for each party and compare.
## estimate four regression models:
tory_loser <- lm(ln.net ~ margin, data = mps[(mps$winner == 0) & (mps$party == "tory"),])
tory_winner <- lm(ln.net ~ margin, data = mps[(mps$winner == 1) & (mps$party == "tory"),])
labour_loser <- lm(ln.net ~ margin, data = mps[(mps$winner == 0) & (mps$party == "labour"),])
labour_winner <- lm(ln.net ~ margin, data = mps[(mps$winner == 1) & (mps$party == "labour"),])
## predict the value of `ln.net` at `margin`$=0$ from each model:
t_l_0 <- predict(tory_loser, data.frame(margin = 0))
t_w_0 <- predict(tory_winner, data.frame(margin = 0))
l_l_0 <- predict(labour_loser, data.frame(margin = 0))
l_w_0 <- predict(labour_winner, data.frame(margin = 0))
## calculate the difference in these predictions for each party:
diff_tory <- t_w_0 - t_l_0
diff_labour <- l_w_0 - l_l_0
diff_tory
### 0.6496861
## the effect of winning is positive for the tory.
diff_labour
### -0.3680728
## the effect of winning is negative for the labour.
diff_diff <- diff_tory - diff_labour
diff_diff
### 1.017759
# Problem 2
# a) Load the `blockTools` and bring the `x100` data into the workspace.
library(blockTools)
data("x100")
# b) Create a new variable `ra_tr` in the `x100` data, and randomly allocate half the units to treatment (1), half to control (0).
# (Set the random seed to make your allocation replicable.)
## Set seed:
set.seed(123)
## Choose IDs of treatment group randomly:
id_tr <- sample(x100$id,nrow(x100)/2,replace=FALSE)
## Add "Treatment"/"Control" to x100:
x100$simple_tr <- 0
x100$simple_tr[x100$id %in% id_tr] <- 1
# c) Calculate the mean of `b1` for the treatment and control groups, and compare.
## Calculate the mean of "b1" for the treatment and control:
b1_si_t <- mean(x100$b1[x100$simple_tr == 1])
b1_si_c <- mean(x100$b1[x100$simple_tr == 0])
b1_si_t
### [1] 448.84
b1_si_c
### [1] 486
## Compare the treatment and control groups:
b1_si_t - b1_si_c
### [1] -37.16
# d) Now block on `b1`, and assign treatment within blocks.
## Block on "b1":
blocked <- block(x100, id.vars = "id",block.vars = "b1")
# Assign treatment:
assigned <- assignment(blocked, seed = 1)
assg <- assigned$assg$`1`
# Rename columns of blocked units:
names(assg)[1] <- "Treatment"
names(assg)[2] <- "Control"
# Add "Treatment"/"Control" to x100:
x100$block_tr <- NA
x100$block_tr[x100$id %in% assg$Treatment] <- 1
x100$block_tr[x100$id %in% assg$Control] <- 0
# e) Calculate the mean of `b1` for the treatment and control groups, and compare to part c).
## Calculate the mean of "b1" for the treatment and control:
b1_br_t <- mean(x100$b1[x100$block_tr == 1])
b1_br_c <- mean(x100$b1[x100$block_tr == 0])
b1_br_t
### [1] 468.16
b1_br_c
### [1] 466.68
## The difference of the means of 'b1' between T/C:
b1_br_t - b1_br_c
### [1] 1.48
cat("part c) :", b1_si_t - b1_si_c)
### part c) : -37.16
cat("brocked :", b1_br_t - b1_br_c)
### brocked : 1.48
## The variable "b1" become more balanced between the treatment and control groups
## by an assignment within blocks based on "b1" itself.
## Estimate heterogeneous treatment effect by regression:
lm_h <- lm(ln.net ~ winner + party + winner:party, data=mps)
mps <- read_csv("http://j.mp/32PHfFd")
# b) Create a new variable called `winner`.  Set it equal to `1` if `margin` is greater than 0; set it to `0` if `margin` is less than zero.
mps <- mps %>% mutate(winner=if_else(margin > 0,1,0))
# c) Consider `winner` to be a randomly assigned treatment.  Estimate the causal effect of `winner` on `ln.net`, net worth at death of these candidates.
## Estimate ATE by difference-in-means
ate_ests <- mean(mps$ln.net[mps$winner==1]) - mean(mps$ln.net[mps$winner==0])
ate_ests
### 0.5208094
# d) Investigate whether the effect of `winner` varies by `party`.
## Check the name of all parties:
unique(mps$party)
### [1] "tory"   "labour"
## The effect for candidates of the "tory":
tory_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "tory")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "tory")])
## The effect for candidates of the "labour":
labour_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "labour")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "labour")])
cat("the effect for the tory:",tory_ests)
### the effect for the tory: 0.7932196
cat("the effect for the labour:",labour_ests)
### the effect for the labour: -0.08265672
cat("the difference of the effect:", tory_ests-labour_ests)
### the difference of the effect: 0.8758763
## Estimate heterogeneous treatment effect by regression:
lm_h <- lm(ln.net ~ winner + party + winner:party, data=mps)
mps <- read_csv("http://j.mp/32PHfFd")
# b) Create a new variable called `winner`.  Set it equal to `1` if `margin` is greater than 0; set it to `0` if `margin` is less than zero.
mps <- mps %>% mutate(winner=if_else(margin > 0,1,0))
# c) Consider `winner` to be a randomly assigned treatment.  Estimate the causal effect of `winner` on `ln.net`, net worth at death of these candidates.
## Estimate ATE by difference-in-means
ate_ests <- mean(mps$ln.net[mps$winner==1]) - mean(mps$ln.net[mps$winner==0])
ate_ests
### 0.5208094
# d) Investigate whether the effect of `winner` varies by `party`.
## Check the name of all parties:
unique(mps$party)
### [1] "tory"   "labour"
## The effect for candidates of the "tory":
tory_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "tory")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "tory")])
## The effect for candidates of the "labour":
labour_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "labour")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "labour")])
cat("the effect for the tory:",tory_ests)
### the effect for the tory: 0.7932196
cat("the effect for the labour:",labour_ests)
### the effect for the labour: -0.08265672
cat("the difference of the effect:", tory_ests-labour_ests)
### the difference of the effect: 0.8758763
## Estimate heterogeneous treatment effect by regression:
lm_h <- lm(ln.net ~ winner + party + winner:party, data=mps)
mps <- read_csv("http://j.mp/32PHfFd")
library(tidyverse)
# a) Read the data into R and name it `mps`
mps <- read_csv("http://j.mp/32PHfFd")
# b) Create a new variable called `winner`.  Set it equal to `1` if `margin` is greater than 0; set it to `0` if `margin` is less than zero.
mps <- mps %>% mutate(winner=if_else(margin > 0,1,0))
# c) Consider `winner` to be a randomly assigned treatment.  Estimate the causal effect of `winner` on `ln.net`, net worth at death of these candidates.
## Estimate ATE by difference-in-means
ate_ests <- mean(mps$ln.net[mps$winner==1]) - mean(mps$ln.net[mps$winner==0])
ate_ests
### 0.5208094
# d) Investigate whether the effect of `winner` varies by `party`.
## Check the name of all parties:
unique(mps$party)
### [1] "tory"   "labour"
## The effect for candidates of the "tory":
tory_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "tory")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "tory")])
## The effect for candidates of the "labour":
labour_ests <- mean(mps$ln.net[(mps$winner == 1) & (mps$party == "labour")]) - mean(mps$ln.net[(mps$winner == 0) & (mps$party == "labour")])
cat("the effect for the tory:",tory_ests)
### the effect for the tory: 0.7932196
cat("the effect for the labour:",labour_ests)
### the effect for the labour: -0.08265672
cat("the difference of the effect:", tory_ests-labour_ests)
### the difference of the effect: 0.8758763
## Estimate heterogeneous treatment effect by regression:
lm_h <- lm(ln.net ~ winner + party + winner:party, data=mps)
summary(lm_h) %>% round(3)
summary(lm_h) %<% round(3)
summary(lm_h) %>% round(3)
summary(lm_h)$cofficient %>% round(3)
summary(lm_h)$coefficients %>% round(3)
summary(lm_h)$coefficients[4] %>% round(3)
summary(lm_h)$coefficients[4]
summary(lm_h)$coefficients[4]%>% round(3)
summary(lm_h)$coefficients[4]
cat("the difference of the effect:", summary(lm_h)$coefficients[4])
cat("the coefficient of the interaction term:", summary(lm_h)$coefficients[4])
summary(lm_h)$Pr[|t|]
summary(lm_h)[4]
summary(lm_h)[1]
summary(lm_h)[2]
summary(lm_h)[3]
cat("the coefficient of the interaction term:", summary(lm_h)$coefficients[,"Pr(>|t|)"][4])
cat("the p-value of the coefficient of the interaction term:", summary(lm_h)$coefficients[,"Pr(>|t|)"][4])
library(estimatr)
nchar("---
title: "無題の論文"
date: "`r Sys.Date()`"
author: "RMDJA太郎"
abstract: "`rmdja` パッケージは, `rmarkdown` および `bookdown` パッケージで自然なレイアウトの日本語文書を作成する際に必要な煩雑な設定を自動で行い, ユーザーの負担を軽減するために作成されたパッケージである."
output:
rmdja::pdf_document2_ja:
latex_engine: lualatex
documentclass: bxjsarticle
classoption:
- a4paper
- 'number-of-lines=30'  # 1頁30行, ただし見出しは別
- 'textwidth=40zw'      # 1行全角40字, ただしプロポーショナルフォントなので絶対ではない
header-includes:
- \setlength{\parindent}{4pt}
- \setlength{\parskip}{0pt}
---
\newpage
```{r init, include=F}
require(knitr)
require(tidyverse)
# グラフの標準フォント設定
# うまく行かない場合は手動で設定してください
rmdja::set_graphics_font(rmdja::get_default_font_family("lualatex")["serif"])
```
# イントロダクション {#introduction}
　現代の日本の政治および地方自治における一つの問題は、地方議会議員・自治体首長のなり手不足、すなわち選挙における立候補者の減少及びそれに伴う無投票当選の増加がある。例えば、2019年4月に行われた第19回統一地方選挙においては、立候補者が定員に満たないために無投票当選となった当選者の割合は41 の道府県議会選挙で26.9％、121 の町村長選挙で45.5%、375の町村議会議員選挙で23.3%にそれぞれ達し、道府県議会選挙及び町村議会議員選挙では記録が残る1951 年以降の統一地方選挙において過去最高の水準となっている。
　
　こうした選挙における立候補人数の減少や無投票当選の増加は、地方自治体の重要な役職の選定に関して住民の選択の余地を狭めてしまうために、政治能力が高くない人をそうした役職に就任させてしまい、地方自治の質の低下という問題を招く可能性がある。
　議員・首長の立候補者不足及びそれに起因する地方自治の質の低下を防ぐ方策としては、これらの役職の待遇の向上が挙げられる。その具体策の一つが、議員・首長報酬の増額である。実際に全国町村議会議長会も町村議会議員について、その報酬の増額がなり手不足の問題の解決に寄与する可能性があることを指摘しており、彼らが設置した議員報酬の検討委員会は、2019年3月時点において全国の町村議会のうち約４割で議員報酬見直しの検討が行われていることを報告している（町村議会議員の議員報酬等のあり方検討委員会,2019）。
　
　一方で、こうした議員・首長報酬の増額は、当然ながら一定の財政支出を伴うものであり、そのコストに見合うだけの効果があるかどうかには一定の議論がある(総務省自治行政局行政課,2017など)。そこでこのような重要な議論の進展に寄与するために、今回の研究では、特に議会・議員に着目し、日本の市町村レベルのパネルデータを用いて議員報酬額が選挙における立候補人数及び議会の活動状況に与える影響を推定し、議員報酬の増額の効果を定量的に明らかにする。
　
　もちろん、こうした政治家の報酬が立候補や政治のパフォーマンスに与える影響は政治学や経済学の分野において、過去に分析の対象とされている。実証研究としては、報酬が外生的に決定される自然実験的な状況を利用してこうした影響を推定したGagliarducci and Nannicini(2013), Ferraz and Finan(2009)や、構造モデルを用いてこの影響を分析したKeane and Merlo(2010)などが良く知られている。このうち、Gagliarducci and Nannicini(2013)はイタリアの市町村のデータを用い、報酬の上昇により教育年数の長い人や専門的な職業に就いていた人が首長に立候補する傾向、また当選者が財政面でより健全な行政運営を行う傾向が強まることを示している。また、Ferraz and Finan(2009)はブラジルの地方議会に関して報酬額が高くなるほど議員の条例提案数や議員提案条例の可決数が増加すること、Keane and Merlo(2010)はアメリカの連邦議会上下院に関して議員報酬の削減は特に能力の高い議員の議会からの退出を招くことを、それぞれ明らかにしている。
　
　しかしながら、こうした分析のほとんどは欧州や米大陸の議会がその対象であり、これらの分析の報酬額がパフォーマンスに正の影響を与えるという結果が必ずしも日本の地方議会においても当てはまるとは限らない。根拠としてはMessner and Polborn(2004)やMattozzi and Merlo(2008)といった理論的な研究が挙げられる。前者は状況次第では報酬の上昇が能力の高い市民の立候補の確率を下げること、後者は民間企業を考慮した場合に報酬の上昇が政治家の平均的な質を下げる可能性があることをそれぞれ示している。したがって報酬の上昇が政治的なパフォーマンスの低下につながる可能性も十分にある中で、日本の地方議会に着目した時に報酬額の変動が議会活動にどちらの方向の影響を与えるかについて検討した研究は筆者の知りうる限り存在しない。さらに、立候補者が定員に満たない場合に無投票当選となり選挙そのものが発生しない日本においては、立候補者数が自治の質のみならず選挙による民主主義の維持という面でそれ自体重要な変数と考えられるため、パフォーマンス（議会活動の状況）と合わせて報酬による影響を明らかにする必要があると考えられるが、海外の先行研究の中で立候補者数を直接の被説明変数として扱っているものは多くない。
　
　日本の市町村レベルにおけるこうした影響の推定上の問題としては、先述したGagliarducci and Nannicini(2013)などの状況とは異なり、説明変数である議員報酬が外生的に決定されるわけではなく、各市町村の社会経済的な状況に加え、過去の選挙における立候補者数や過去の議員活動の記録などによって決められている可能性があるという側面がある。このような説明変数がフィードバック的に決定される可能性がある状況下においては、固定効果モデルを分析に用い各市町村の時間を通じて一定な観測不可能な要因をコントロールしたとしても、分析対象の影響に関して、推定量は一致性を持たず、厳密な因果効果の推定にならないとされている。そこで本研究ではこうした状況においても推定量が一致性を持つことが知られるダイナミックパネルモデルを分析に用い、因果効果に迫ることを試みている。
　
　また、この研究においては、特に議員報酬額の議会活動に与える影響に関して、推定後にその経路についても議論を行いたいと考えている。Gagliarducci and Nannicini(2013), Ferraz and Finan(2009)などの先行研究では、この影響の経路について主に当選議員の能力・質が変化による経路と議員のインセンティブの変化による経路の2種類が存在するとされている。今後、各議員の年齢によって後者の経路のみが変化するという仮定の下で、議会の平均年齢によってサンプルを分けサンプル間での影響の推定値の違いを見ることで、全体に占める後者の経路の割合についての示唆を与えたいと考えている。
　
　データについては、議会報酬額及び議会活動の指標に関して、全国町村議会議長会による町村議会実態調査及び全国市議会議長会による市議会の活動に関する実態調査、市議会議員定数・報酬に関する調査、市議会議員の属性に関する調査の結果が一部公表されており、その部分を用いている。また、立候補者数など選挙についての変数は、各市町村の選挙管理委員会発表情報の集計事業を行っている民間企業、イチニ株式会社が提供する選挙情報プラットフォーム「選挙ドットコム」に掲載されているデータを用いている。さらに各市町村の財政状況や人口構成等に関する変数は、総務省による地方財政状況調査の結果および総務省統計局による「統計でみる都道府県・市区町村のすがた（社会・人口統計体系）」のデータを用いている。
第 \@ref(theory-literatures) 節は先行研究のサーベイである.
# 理論的背景と先行研究 {#theory-literatures}
## 理論的背景
議員報酬が選挙や議会のパフォーマンスにどのような影響を与えるかに関する理論的な議論は、伝統的に、政治学(political science)・政治経済学(political economy)・公共経済学(public economics)などの分野で、主としてゲーム理論の枠組みを用いた「フォーマル・モデル」によって進んできた。理由としては、政治家の労働市場は、一般的な労働市場と異なり、選挙を介したシステムであり、候補者間の政治定主張の相互作用や、他の候補者の主張や能力を考慮した候補者の戦略が、アウトカムに大きな影響を及ぼすためである。過去の文献は、議員報酬の増額は、均衡における、選挙への立候補者人数、候補者・当選者の「能力」、再選のインセンティブ、およびそれらの変動の結果としての任期中のパフォーマンスに影響を与えるとしている。
### 効率賃金理論　(efficiency wage theory)
　効率賃金理論(efficiency wage theory)は、労働者の実質賃金が高く設定されればされるほど労働生産性が高まるという、労働経済学(labor economics)の分野における古典的な理論の一つである。この理論は、報酬が政治家に与える影響に関して、フォーマル・モデルに依らずに予測を与えているほとんど唯一の理論であるといえる。
　
　高い賃金が労働生産性を高める経路としては、(1) 解雇されるコストが上昇し、義務を怠らなくなること(Shapiro and Stiglitz, 1984)、(2) 職への応募者の質が高まること(Weiss,1980)、(3) モチベーションと規律が高まること(Akerlof,1982)　の3つが挙げられる。Gagliarducci and Nannicini(2013)によれば、これらの経路は、政治家の労働市場の文脈では、再選のインセンティブが高まること、より優秀な人材が集まること、政治家のモラルが向上することに対応するとし、これらを通じて、パフォーマンスが高まるとしている。
　
### 市民候補者モデル　(citizen-candidate model)
　市民候補者モデル(citizen-candidate model)は、Osborbe and Slivinski(1996)及びBesley and Coate(1997)がゲーム理論の枠組みを用いて考案した、与えられた条件の下でのプレイヤー(市民)の選挙への立候補の挙動の予測を行うモデルである。このモデルの中では、各プレイヤーの利得は、自身の理想の政策と実際の政策の乖離、出馬のコスト、政策とは無関係の議席・政権を得ることのベネフィットの3つの合計として記述され、報酬は、3つ目の利得の一部として解釈される。
　Osborbe and Slivinski(1996)による最も古典的なモデルに依れば、個人が自身の理想の政策と最も近い政策を掲げる候補者に投票するというルールの下で、出馬のコストに比して政策とは無関係の議席を得ることのベネフィットが大きくなるほど立候補人数は増えることが示唆されていることから、報酬は立候補人数に正の影響を与えると考えられる。
　こうした市民候補者モデルの中には、立候補者の「能力」「質」を考慮したモデルも存在する。例えば、Caselli and Morelli(2004)は、民間市場での能力と政治的な能力が相関しているという設定を考え、そうした状況下で、議席・政権を得ることの金銭面でのベネフィットが減るほど、立候補者に占める能力の高い人の割合が減るという理論的予測を提供している。一方で、
　
### 政治的エージェンシー理論 (political agency theory)
## 実証研究
# 仮説 {#hypothesis}
## 先行研究の整理
　前章で紹介した理論モデルは、政治家の報酬をモデルのパラメータとして外生的に与え、その帰結として、選挙への立候補者人数、候補者・当選者の能力、再選のインセンティブ、ひいては政治的なパフォーマンスにどのような影響を与えるかを考察している。これらの理論的予測を整理し、以下のような仮説を立てることができる。
- 仮説1: 議員報酬が高まるほど、選挙における1議席当たりの立候補者人数は増える。
- 仮説2a: 議員報酬が高まるほど、選挙における立候補者の能力が高まる。
- 仮説2b: 議員報酬が高まるほど、選挙における立候補者の能力は低くなる。
- 仮説3: 議員報酬が高まるほど、議会におけるパフォーマンスが高まる。
　ここで、能力はGagliarducci and Nannicini(2013)などの先行研究に倣い、立候補前の職業により測定できると仮定する。同様に議会におけるパフォーマンスに関しても、Ferraz and Finan(2009)などを考慮し、議員提案条例の提出数・可決数により代理されると考える。
　
　上記の通り、仮説2aと仮説2bは互いに対立する仮説となっているが、これは、先行研究の相反する理論的予測を反映したものである。さらに、仮説3に関しては議員報酬の上昇により再選のインセンティブや政治家の規律は高まり、前章で紹介した過去の実証研究を総合的に勘案すると議員報酬がパフォーマンスに与える影響の経路としては能力の変化によるものよりも再選のインセンティブの変化・規律の変化によるものの方が大きいと考えられるために、仮に仮説2bが支持されたとしても報酬はパフォーマンスに正の影響を与えると考えられる。
　
## 内生的な議員報酬の操作の影響
　さて、ここまでは主要な理論に基づく先行研究に倣い、あくまで上位の主体により、議員報酬は外生的に決定されるという仮定の下で、その影響を考えてきた。本稿においてはこの仮定を緩め、議員・議会による自発的な議員報酬の操作を考慮に入れる。これは、筆者の知りうる限り、これまでの先行研究がほとんど扱ってこなかった状況であるが、本稿で扱う日本の地方議会などはこうした状況に当てはまり、この場合議員報酬の増額がどのような影響を与えるかの考察を与えることは、極めて重要である。
　
　日本においては、議員報酬を含む地方議員・政治家の金銭的なリターンは、地方自治法により条例により定められることが規定されている。すなわち、議員報酬の操作は、議員自身の行動の結果である条例改正に依って行われるのである。本稿において着目したい点は、こうした議員による条例改正は、議員が発する「メッセージ」になってしまうという点である。
　
　日本において、議員報酬がどのように決定されるか、そのプロセスを明示的に記述した文献は意外にも多くない。その数少ない文献の一つがほ
　
　
　
　
　堀内(2016)が述べている、日本における伝統的な議員の議員定数・報酬削減運動
　
")
(60+75+90+70)/4
(60+70+90+70)/4
(55+70+60+75+85+90+45+70)/8
56+35+46
0.03399 +0.00812
30*4 + 8*3
30*4 + 8*3
144/38
34*4 + 4*3
148/38
32*4 + 4*3
140/36
32*4 + 4*3
34*4 + 4*3
148/38
setwd("C:/Users/miyak/theses_codes")
library(tidyverse)
df <- read.csv("merged_since_2005.csv")
df <- fread("merged_since_2005.csv")
df <- f_read("merged_since_2005.csv")
df <- fread("merged_since_2005.csv")
df <- read.csv2("merged_since_2005.csv")
df <- read.csv2("merged_since_2005.csv",sep = '\t')
df <- read.csv2("merged_since_2005.csv")
df <- read.csv2("merged_since_2005.csv",header = T, fileEncoding = "cp932")
df <- read.csv2("merged_since_2005.csv", fileEncoding = "cp932")
df <- read.csv2("merged_since_2005.csv", fileEncoding = "cp932")
df <- read.csv("merged_since_2005.csv", fileEncoding = "cp932")
View(df)
df <- read.csv("merged_since_2005.csv", fileEncoding = "utf-8")
ols <- lm(compe_ratio_data~salary_assembly_member,data=df)
ols <- lm(compe_rate_data~salary_assembly_member,data=df)
ols <- lm(compe_rate_data~salary_assembly_member,data=df,rm.na=TRUE)
ols <- lm.fit(compe_rate_data~salary_assembly_member,data=df)
ols <- lm(compe_rate_data~salary_assembly_member,data=df)
ols <- lm(compe_rate_data~salary_assembly_member,data=df,na.rm=T)
ols <- lm(compe_rate_data~salary_assembly_member,data=df,na.rm=TRUE)
is.na(df$compe_rate_data)
df[is.na(df$compe_rate_data),]
nrow([is.na(df$compe_rate_data),])
nrow(df[is.na(df$compe_rate_data),])
df <- df[is.na(df$compe_rate_data),]
df <- read.csv("merged_since_2005.csv", fileEncoding = "utf-8")
df <- df[!is.na(df$compe_rate_data),]
df <-df[!is.na(df$salary_assembly_member),]
ols <- lm(compe_rate_data~salary_assembly_member,data=df)
View(df)
df <- subset(df, select = c("ele_ymd","compe_rate_data","salary_assembly_member"))
df$compe_rate_data == NA
hist(df$compe_rate_data)
hist(df$salary_assembly_member)
scatter(df$salary_assembly_member,df$compe_rate_data)
scatter.smooth(df$salary_assembly_member,df$compe_rate_data)
plot(df$salary_assembly_member,df$compe_rate_data)
NA %in% df$compe_rate_data
NaN %in% df$compe_rate_data
Inf %in% df$compe_rate_data
df$compe_rate_data == Inf
df[df$compe_rate_data == Inf]
df[df$compe_rate_data == Inf,]
df[!df$compe_rate_data == Inf,]
df <- df[!df$compe_rate_data == Inf,]
ols <- lm(compe_rate_data~salary_assembly_member,data=df)
summary(ols)
log_lin <- lm(compe_rate_data~log(salary_assembly_member),data=df)
summary(log_lin)
plot(log(df$salary_assembly_member),df$compe_rate_data)]
plot(log(df$salary_assembly_member),df$compe_rate_data)
abline(log_lin)
